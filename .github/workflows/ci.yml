# Можно тут тоже SECRETS сделать для безопасности
name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # check all errors using the configuration in .flake8
        flake8 . --count --statistics
    - name: Check formatting with black
      run: |
        black --check --diff .
    - name: Check imports with isort
      run: |
        isort --check --diff .
#
#  security:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.10'
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install safety
#        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#    - name: Check for security vulnerabilities
#      run: |
#        safety check

#  test:
#    runs-on: ubuntu-latest
#    needs: [lint] #, security]
#    services:
#      postgres:
#        image: postgres:14
#        env:
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_USER: postgres
#          POSTGRES_DB: test_db
#        ports:
#          - 5432:5432
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.10'
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install pytest pytest-django
#        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#    - name: Run tests
#      env:
#        DEBUG: 'True'
#        SECRET_KEY: 'test-key-for-ci'
#        SQL_ENGINE: django.db.backends.postgresql
#        SQL_DATABASE: test_db
#        SQL_USER: postgres
#        SQL_PASSWORD: postgres
#        SQL_HOST: localhost
#        SQL_PORT: 5432
#      run: |
#        pytest

  docker:
    runs-on: ubuntu-latest
    needs: [lint] #, security]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        load: true
        tags: uptrader:test
    - name: Test Docker image
      run: |
        docker run --rm uptrader:test echo "Docker image built successfully"
